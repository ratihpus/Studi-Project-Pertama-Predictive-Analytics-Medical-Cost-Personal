# -*- coding: utf-8 -*-
"""Studi Project Pertama : Predictive Analytics  Medical Cost Personal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IC_i35Tjj3TOP_CAINEYBVKOHSfGusr-

# Prediksi Biaya Asuransi Kesehatan Menggunakan Model Machine Learning pada Health Insurance

Health Insurance Dataset merupakan dataset yang digunakan untuk memprediksi biaya asuransi berdasarkan fitur lainnya. Dataset tersebut berisi informasi terkait biaya asuransi kesehatan yang dibayarkan oleh individu kepada perusahaan asuransi. Sehingga hal tersebut dapat berguna bagi perusahaan asuransi kesehatan dalam menentukan premi asuransi yang tepat untuk individu yang ingin diasuransikan.

Dataset ini terdiri dari 7 fitur/variabel yaitu :
1. age: Usia.
2. sex: Jenis kelamin.
3. bmi: Indeks Massa Tubuh (BMI).
4. children: Jumlah anak/anak-anak dalam tanggungan.
5. smoker: Status perokok.
6. region: Wilayah tempat tinggal atau terdaftar.
7. charges: Biaya asuransi yang dibayarkan.


Tujuan Analisis: Tujuan umum dari analisis dataset ini adalah untuk memahami fitur mana yang paling memengaruhi biaya asuransi. Membandingkan performa beberapa model regresi. Menentukan model terbaik untuk prediksi biaya asuransi (charges).

Tipe Data: Sebagian besar kolom dalam dataset ini termasuk data numerik seperti usia (age), BMI, jumlah anak (children), dan biaya asuransi (charges). Namun, kolom 'sex', 'smoker', dan 'region' adalah kolom kategorikal yang biasanya mengandung data dalam bentuk teks atau kategori.

Potensi Insight: Analisis data pada dataset ini dapat menghasilkan beberapa wawasan, seperti pengaruh usia, status perokok, atau BMI terhadap biaya asuransi. Dapat juga melakukan regresi untuk memprediksi biaya asuransi berdasarkan atribut-atribut ini.

Machine Learning: Dataset ini sering digunakan dalam proyek pembelajaran mesin, seperti regresi linier untuk memprediksi biaya asuransi atau klasifikasi untuk memprediksi apakah seseorang adalah perokok atau bukan.

Visualisasi: dapat menggunakan visualisasi data seperti scatter plot, box plot, histogram, dan lainnya untuk memahami hubungan antara variabel dalam dataset ini.

Praktik Bisnis: Data kasus nyata yang sering digunakan dalam industri asuransi untuk penilaian risiko dan penetapan premi. Analisis data ini dapat membantu perusahaan asuransi dalam pengambilan keputusan yang lebih baik dan pemahaman terhadap pelanggan.
"""

# Commented out IPython magic to ensure Python compatibility.
# import the required libraries

import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn import metrics
from sklearn import preprocessing
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

"""# **Business Understanding**

* Membantu perusahaan asuransi untuk menentukan harga premi yang tepat dan adil berdasarkan faktor-faktor yang ada pada dataset.

* Bagaimana pengaruh faktor usia, status perokok, atau BMI terhadap biaya asuransi terhadap biaya asuransi.
"""

# load the dataset
dataset_path = pd.read_csv('/content/medical_insurance.csv')
dataset_path.head(10)

dataset_path.info()

"""# **Data Understanding**

Dataset ini merupakan dataset yang berisi informasi tentang biaya asuransi kesehatan. Dataset ini berisi 1338 baris data dan 7 variable, yaitu ;


1. age: usia dari individu dalam tahun
2. sex: jenis kelamin individu (male/female)
3. bmi: body mass index, sebuah ukuran yang menunjukkan apakah seseorang memiliki berat badan yang sehat, diperoleh dari berat badan dibagi dengan kuadrat tinggi badan dalam satuan kg/m^2
4. children: jumlah anak-anak yang diasuransikan
5. smoker: apakah individu merokok atau tidak (yes/no)
6. region: kota tempat individu tinggal
7. charges: biaya asuransi kesehatan yang dibebankan kepada individu
"""

#Digunakan untuk menampilkan statistik deskriptif dari kolom numerik di dalam DataFrame
dataset_path.describe()

"""# Menangani Missing Value dan Outlier

* Count : jumlah total data yang tersedia (non-null) untuk setiap kolom
* Mean : Rata-rata nilai pada kolom
* std : Standar Deviasi, mengukur seberapa jauh data tersebar dari rata-rata
* min : Nilai minimum dalam kolom
* 25% (Kuartil pertama) : 25% data berada di bawah nilai ini
* 50% (Median) : Nilai tengah, membagi data menjadi dua bagian yang sama
* 75% (Kuartil ketiga) : 75% data berada dibawah nilai ini
* max: nilai maksimum dalam kolom

Dengan describe () ini dapat mengidentifikasi potensi outlier (nilai yang jauh dari kuartil) dan mengetahui standar deviasi yang dapat memberikan wawasan tentang sebaran data.
"""

# Mengecek jumlah nilai yang hilang di setiap kolom
print(dataset_path.isnull().sum())

"""# Converting Categorical Features to Numerical"""

categ_to_num = {'sex': {'male' : 0 , 'female' : 1},
              'smoker': {'no': 0 , 'yes' : 1},
              'region' : {'northwest':0, 'northeast':1,'southeast':2,'southwest':3}
             }

dataset_path.replace(categ_to_num, inplace = True)

"""Kode diatas untuk menggantikan nilai kategorikal dikolo [sex, smoker, dan region] dengan nilai numerik, agar data siap digunakan oleh model. inplace=True memastikan bahwa perubahan dilakukan langsung pada dataset tanpa perlu membuat salinan baru


Konversi ini merupakan bagian penting dari preprocessing data yang memungknkan model machine learning untuk  memahami, memproses, dan menganalisis data secara efektif.  
"""

# One-Hot Encoding untuk variabel kategorikal
categorical_columns = ["sex", "smoker", "region"]
dataset_encoded = pd.get_dummies(dataset_path, drop_first=True)
print(dataset_encoded.head())

"""Kode tersebut berfungsi untuk melakukan One-Hot Encoding pada variabel kategorikal dalam dataset.

Kode tersebut mengubah dataset sehingga semua variabel kategorikal dapat digunakan dalam algoritma machine learning yang membutuhkan data numerik. Dengan drop_first=True, dimensi data yang dihasilkan lebih kecil dan menghindari redundansi.
"""

dataset_path.info()

plt.subplots(figsize=(10,7))
sns.boxplot(data=dataset_path).set_title("Insurance Health")
plt.show()

#outlier : sampel yang nilainya sangat jauh dari cakupan umum data utama
sns.boxplot(x=dataset_path['bmi'])

#Fitur charges
sns.boxplot(x=dataset_path['charges'])

"""Ouliers terdeteksi pada variabel bmi dan charges"""

# Hanya pilih kolom numerik
numeric_data = dataset_path.select_dtypes(include=['number'])

# Menghitung Q1, Q3, dan IQR pada data numerik
Q1 = numeric_data.quantile(0.25)
Q3 = numeric_data.quantile(0.75)
IQR = Q3 - Q1

# Menyaring outlier berdasarkan IQR
dataset_copy_clean = dataset_path[~((numeric_data < (Q1 - 1.5 * IQR)) | (numeric_data > (Q3 + 1.5 * IQR))).any(axis=1)]
dataset_path.shape

"""kode diatas bertujuan untuk membersihkan outlier dari dataset. Fokus pada fitur yang memiliki nilai angka, karena hanya fitur numerik yang relevan untuk deteksi outlier berbasis IQR. Tujuan dari kode tersebut menghapus baris yang mengandung nilai outlier pada kolom numerik, agar model prediksi tidak terpengaruh oleh nilai ekstrem.

Dengan hasil bahwa dataset yang lebih bersih, dengan ukuran lebih kecil karena outliers telah dihapus.

# **Univariate Analysis**
"""

print(dataset_path['sex'].value_counts().sort_values())

print(dataset_path['smoker'].value_counts().sort_values())

print(dataset_path['region'].value_counts().sort_values())

plt.figure(figsize=(12,9))
plt.title('Age vs Charge')
sns.barplot(x='age', y='charges', data=dataset_path, palette='RdPu')
plt.savefig('AgevsCharges')

plt.figure(figsize=(12,9))
plt.title('Region vs Charge')
sns.barplot(x='region',y='charges',data=dataset_path,palette='RdPu')

plt.figure(figsize=(12,9))
sns.scatterplot(x='bmi',y='charges',hue='sex',data=dataset_path, palette='RdPu')
plt.title('BMI VS Charge')

plt.figure(figsize=(12,9))
plt.title('Smoker vs Charge')
sns.barplot(x='smoker',y='charges',data=dataset_path,palette='RdPu',hue='sex')

plt.figure(figsize=(12,9))
plt.title('Sex vs Charges')
sns.barplot(x='sex',y='charges',data=dataset_path,palette='RdPu')

dataset_path.hist(bins=50, figsize=(20,15))
plt.show()

"""# **Exploratory Data Analysis - Multivariate Analysis**"""

sns.pairplot(dataset_path, diag_kind = 'kde')

corr = dataset_path.corr()
fig, ax = plt.subplots(figsize=(12,9))
sns.heatmap(corr, cmap='RdPu', annot=True, fmt=".2f", ax=ax)
plt.title("Dependencies of Medical Charges")
plt.savefig('Cor')
plt.show()

"""# **Data Preparation**

Pisahkan Fitur dan Target
"""

# Pisahkan fitur (X) dan target (y)
X = dataset_encoded.drop("charges", axis=1)
y = dataset_encoded["charges"]

# Split dataset menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

X_train.head()

y_train.head()

test_data = X_test.to_csv("test_data.csv", index=False)

X_test.head()

y_test.head()

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.compose import ColumnTransformer

encoder = OneHotEncoder()

X_test['children'].value_counts()

numerical_columns = ['age','children', 'bmi']
numerical_pipeline = make_pipeline(StandardScaler())

categorical_columns = ['region']
categorical_pipeline = make_pipeline(OneHotEncoder())

to_pass = ['sex','smoker']

preprocessor = ColumnTransformer(
    transformers=[
        ("num", numerical_pipeline, numerical_columns),
        ("cat", categorical_pipeline, categorical_columns),
        ('pass', 'passthrough', to_pass)
    ]
)

X_train_transformed = preprocessor.fit_transform(X_train)
print("Transformed train features shape:", X_train_transformed.shape)

X_test_transformed = preprocessor.transform(X_test)
print("Transformed test features shape:", X_test_transformed.shape)

y_train = y_train.values if isinstance(y_train, pd.Series) else y_train
print("y_train shape:", y_train.shape)

print("X_train_transformed type:", type(X_train_transformed))
print("X_train_transformed type:", type(X_train_transformed))

if hasattr(X_train_transformed, 'shape'):
    print("X_train_transformed shape:", X_train_transformed.shape)

print("y_train type:", type(y_train))
print("y_train shape:", y_train.shape)

"""Kode tersebut bertujuan untuk memastikan bahwa X_train_transformed memiliki tipe data yang sesuai dengan kebutuhan proses berikutnya, seperti pelatihan model atau evaluasi.

X_train_transformed dan y_train telah diproses dengan benar dan siap untuk digunakan dalam model machine learning.

Dimensi data antara fitur (X_train_transformed) dan target (y_train) konsisten, yaitu 1940 sample. Ini penting agar model dapat belajar tanpa error terkait ketidaksesuaian dimensi.

# Standarisasi
"""

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

"""# MODEL DEVELOPMENT

# Model Development dengan kNeighbors(KNN)
"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

knn_model = KNeighborsRegressor(n_neighbors=10)
knn_model.fit(X_train, y_train)
y_pred_knn = knn_model.predict(X_train)

"""# Model Development dengan Random Forest"""

rf_model = RandomForestRegressor(random_state=123, n_estimators=100, max_depth=10)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

"""# Model Development dengan Boosting Algorithm"""

adaboost_model = AdaBoostRegressor(n_estimators=100, random_state=123)
adaboost_model.fit(X_train, y_train)
y_pred_adaboost = adaboost_model.predict(X_test)

"""# EVALUASI MODEL"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn_model, 'RF': rf_model, 'Boosting': adaboost_model}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Kode tersebut digunakan untuk menghasilkan prediksi dari model yang disimpan dalam model_dict untuk satu baris data dari x_test, lalu mengompilasi hasilnya dengan nilai sebenarnya (y_true) ke dalam DataFrame.

# Menghitung nilai akurasi model
"""

knn_accuracy = knn_model .score(X_test, y_test)*100
rf_accuracy = rf_model.score(X_test, y_test)*100
boosting_accuracy = adaboost_model.score(X_test, y_test)*100

list_evaluasi = [[knn_accuracy],
            [rf_accuracy],
            [boosting_accuracy]]
evaluasi = pd.DataFrame(list_evaluasi,
                        columns=['Accuracy (%)'],
                        index=['K-Nearest Neighbor', 'Random Forest', 'Boosting'])
evaluasi

import matplotlib.pyplot as plt

# Scatter plot untuk membandingkan prediksi dan nilai aktual
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.6, label="Random Forest")
plt.scatter(y_test, y_pred_adaboost, alpha=0.6, label="Boosting")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2, label="Ideal Prediction")
plt.xlabel("Actual Charges")
plt.ylabel("Predicted Charges")
plt.title("Actual vs Predicted Charges")
plt.legend()
plt.show()

# Fitur penting dari Random Forest
feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns)
feature_importances = feature_importances.sort_values(ascending=False)
print(feature_importances)

# Visualisasi fitur penting
feature_importances.plot(kind='bar', title='Feature Importances (Random Forest)', figsize=(10, 6))
plt.show()

"""smoker_yes (75%): Status merokok adalah fitur paling signifikan yang memengaruhi biaya asuransi. Perokok cenderung memiliki biaya asuransi jauh lebih tinggi dibandingkan bukan perokok.

age (15%): Usia juga memiliki pengaruh besar terhadap biaya asuransi. Semakin tua seseorang, semakin tinggi kemungkinan biayanya karena meningkatnya risiko kesehatan.

bmi (7%): Indeks Massa Tubuh (BMI) menunjukkan kontribusi sedang. Individu dengan BMI lebih tinggi (overweight/obese) cenderung memiliki biaya lebih tinggi.

children (2%): Jumlah anak yang menjadi tanggungan memiliki pengaruh kecil terhadap biaya asuransi.

region dan sex_male (<1%): Wilayah tempat tinggal dan jenis kelamin memiliki pengaruh yang sangat kecil terhadap biaya asuransi. Ini mungkin karena premi asuransi ditentukan lebih banyak oleh kondisi kesehatan individu dibandingkan lokasi geografis atau jenis kelamin.
"""